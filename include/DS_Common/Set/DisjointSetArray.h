// DisjointSetArray.h

#ifndef __DS_COMMON_DISJOINTSETARRAY_H__
#define __DS_COMMON_DISJOINTSETARRAY_H__

/* Information */
//====================================================================================================

/*!
*  @file   DisjointSetArray.h
*
*  @brief  The Definition of Disjoint Set implemented by array. 
*          (idx=member, array content is the group id)
*
*  @author Po-Wei Huang
*
*  @date   2021/10/10
*/

//====================================================================================================

/* Header */
//====================================================================================================

#include <iostream>
#include <vector>
#include <condition_variable>

#include <DS_Common/LibSetting/LibSetting.h>
//====================================================================================================


/* Definition */
//====================================================================================================

namespace DS_Common {

}
//====================================================================================================


/* Class */
//====================================================================================================
namespace DS_Common {
	class  DS_COMMON_EXPORTS DisjointSetArray
	{
		std::vector<int> group;
		std::vector<int> group_size;
	public: // functions

		//-----------------------------------------------------------------------------------------
		/*!
		*  @brief      Default constructor
		*
		*/
		DisjointSetArray() {}
		//-----------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------
		/*!
		*  @brief      Default destructor
		*
		*/
		virtual ~DisjointSetArray() {}
		//-----------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------
		/*!
		*  @brief      initialize
		*
		*/
		void initialize(int number_of_element);
		//-----------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------
		/*!
		*  @brief      find, return the group number
		*
		*/
		int find(const int x);
		//-----------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------
		/*!
		*  @brief      equivlence
		*
		*/
		bool equivlence(const int x, const int y);
		//-----------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------
		/*!
		*  @brief      Load file
		*
		*/
		void union_member(const int x, const int y);
		//-----------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------
		/*!
		*  @brief      cardinality
		*
		*/
		int cardinality(const int x);
		//-----------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------
		/*!
		*  @brief      sintleton
		*
		*/
		bool sintleton(const int x);
		//-----------------------------------------------------------------------------------------


	};
	//--------------------------------------------------------------------------------------------
}
//====================================================================================================

#endif /* __DS_COMMON_DISJOINTSETARRAY_H__ */
