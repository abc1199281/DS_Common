// Timer.h

#ifndef __COMMON_TIMER_H__
#define __COMMON_TIMER_H__

/* Information */
//====================================================================================================

/*!
*  @file   Timer.h
*
*  @brief  A timer, used to test the program efficiency, referece to FIA-Timer, based on chrono.
*
*  @author Po-Wei Huang 
*
*  @date   2019/02/02
*/

//====================================================================================================

/* Header */
//====================================================================================================
#include <memory>
#include <string>

#include <DS_Common/LibSetting/LibSetting.h>
//====================================================================================================

/* Class */
//====================================================================================================
namespace DS_Common {
	namespace Time {
		class DS_COMMON_EXPORTS Timer
		{
		public: // Function

			//----------------------------------------------------------------------------------------
			/*!
			*  @brief      Start time will be set to 0 when the object is constructed.
			*/
			Timer();
			//----------------------------------------------------------------------------------------

			//----------------------------------------------------------------------------------------
			/*!
			*  @brief      Free memories.
			*/
			~Timer();
			//----------------------------------------------------------------------------------------

			//----------------------------------------------------------------------------------------
			/*!
			*  @brief      Start or reset the timer.
			*/
			void start();
			//----------------------------------------------------------------------------------------

			//----------------------------------------------------------------------------------------
			/*!
			*  @brief      Get the time cost from start to call this function.
			*
			*  @return     duration (second).
			*/
			double getSec();
			//----------------------------------------------------------------------------------------

			//----------------------------------------------------------------------------------------
			/*!
			*  @brief      Get the time cost from start to call this function.
			*
			*  @return     duration (millisecond).
			*/
			double getMSec();
			//----------------------------------------------------------------------------------------

			//----------------------------------------------------------------------------------------
			/*!
			*  @brief      Get the time cost from start to call this function.
			*
			*  @return     duration (millisecond).
			*/
			double getMicroSec();
			//----------------------------------------------------------------------------------------

			//----------------------------------------------------------------------------------------
			/*!
			*  @brief      Get the time for folder name.
			*
			*  @input[in]  setting  The format of returned time (reference to std::put_time)
			*
			*  @return     string with MMDDHHMMSS
			*/
			//static std::string getTime(std::string setting = "%m%d%H%M%S");
			//----------------------------------------------------------------------------------------

		private: // Member

			class Member;
			std::unique_ptr<Member> member;
		};
	}	
}

//====================================================================================================

#endif /* __TIME_TIMER_H__ */