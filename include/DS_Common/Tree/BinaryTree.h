// BinaryTree.h

#ifndef __DS_COMMON_BINARY_TREE_H__
#define __DS_COMMON_BINARY_TREE_H__

/* Information */
//====================================================================================================

/*!
*  @file   BinaryTree.h
*
*  @brief  The Definition of BinaryTree and its Node Template
*
*  @author Po-Wei Huang
*
*  @date   2021/04/24
*/

//====================================================================================================


/* Header */
//====================================================================================================

#include <iostream>
#include <DS_Common/LibSetting/LibSetting.h>
//====================================================================================================


/* Definition */
//====================================================================================================

namespace DS_Common {

	//--------------------------------------------------------------------------------------------
	/*!
	*  @brief      Tree Node
	*
	*/
	template <class T>
	struct TreeNode
	{
		T val;
		TreeNode *left;
		TreeNode *right;
		TreeNode() : left(nullptr), right(nullptr) {}
		TreeNode(T x) : val(x), left(nullptr), right(nullptr) {}
		TreeNode(T x, TreeNode<T> *left, TreeNode<T> *right) : val(x), left(left), right(right) {}
	};
	//--------------------------------------------------------------------------------------------

	//--------------------------------------------------------------------------------------------
	/*!
	*  @brief      Binary Tree
	*
	*/
	template<typename T>
	class  BinaryTree
	{
	public:
		
		//-----------------------------------------------------------------------------------------
		/*!
		*  @brief      Default Constructor
		*
		*/
		BinaryTree() {}
		//-----------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------
		/*!
		*  @brief      Constructor with Root
		*
		*/
		BinaryTree(TreeNode<T>* r) : root(r) {}
		//-----------------------------------------------------------------------------------------

		//-----------------------------------------------------------------------------------------
		/*!
		*  @brief      In order Traversal
		*
		*/
		void inorder(TreeNode<T>* cur);
		//-----------------------------------------------------------------------------------------
		//-----------------------------------------------------------------------------------------
		/*!
		*  @brief      In order Traversal
		*
		*/
		void inorder() { inorder(root); };
		//-----------------------------------------------------------------------------------------


	private:
		TreeNode<T>* root;
	};
	//--------------------------------------------------------------------------------------------
}



//====================================================================================================


/* Function */
//====================================================================================================

namespace DS_Common {
	//-----------------------------------------------------------------------------------------
	template<typename T>
	void BinaryTree<T>::inorder(TreeNode<T>* cur)
	{
		if (!cur) return;
		inorder(cur->left);
		std::cout << cur->val << std::endl;
		inorder(cur->right);
	}
	//-----------------------------------------------------------------------------------------
}
//====================================================================================================

#endif /* __DS_COMMON_BINARY_TREE_H__ */
